import { glob } from "glob";
import { promises as fs } from "fs";
import matter from "gray-matter";
import path from "path";

interface Data {
  title: string;
  image: string;
  slug: string;
  tags: string[];
  author: string;
  content: string;
  links: {
    en?: string;
    it?: string;
  };
}

const getBookData = async () => {
  const files = await getBooksFiles();
  const datas = await Promise.all(files.map((f) => createBookData(f)));
  return datas;
};

const createBookData = async (file: string) => {
  const md = await fs.readFile(file);
  const { data, content } = matter(md) as unknown as {
    data: Data;
    content: string;
  };
  const readTime = readingTime(content);
  return {
    file,
    content,
    slug: data.slug,
    frontMatter: {
      author: data.author,
      links: data.links,
      title: data.title,
      readTime,
      href: path.join("/books", data.slug),
      image: replacePath(file, data.image),
      imagePath: replacePath(file, "."),
    },
  };
};

const replacePath = (file: string, p: string) => {
  return path.join(
    "/",
    file.replace(process.cwd() + "/content/books", "/books"),
    "..",
    p
  );
};

async function getBooksFiles() {
  return new Promise<string[]>((resolve, reject) => {
    const contentDir = path.resolve(__dirname, "content/books");
    glob(contentDir + "/**/*.{md,mdx}", (err, files) => {
      if (err) {
        return reject(err);
      }
      resolve(files);
    });
  });
}

async function copyBooksImages() {
  const src = path.resolve(__dirname, "content/books");
  const dst = path.resolve(__dirname, "public/books");
  try {
    await fs.rm(dst, { recursive: true });
  } catch {}
  await fs.mkdir(dst, { recursive: true });

  const imgs = await getFiles(src + "/**/*.{jpg,jpeg,png}");
  imgs.forEach(async (img) => {
    const imgDst = img.replace(src, dst);
    const fldDst = path.dirname(imgDst);
    try {
      await fs.mkdir(fldDst, { recursive: true });
    } catch {}
    await fs.copyFile(img, imgDst);
  });
}

const getFiles = (p: string) => {
  return new Promise<string[]>((resolve, reject) => {
    glob(p, (err, files) => {
      if (err) {
        return reject(err);
      }
      resolve(files);
    });
  });
};

function readingTime(text: string) {
  const wpm = 225;
  const words = text.trim().split(/\s+/).length;
  const time = Math.ceil(words / wpm);
  return time;
}

async function build() {
  const data = await getBookData();
  await copyBooksImages();

  await fs.writeFile(
    __dirname + "/books.ts",
    `// autogenerated by ${__filename}. Do not edit!

export type Book = typeof books[number]
export const getBooks = () => books
export const getBook = (slug: string) => books.find(book => book.slug === slug)

const books = ${JSON.stringify(data, null, 2)}`
  );
}

build();
